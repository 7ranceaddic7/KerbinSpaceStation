	CONTRACT_TYPE
    {
        // Unique name of the contract type (required)
        name = MunHabModuleCupola

        // Contract text details
        title = Add a Habitation Module to Mun Station
        description = Our Kerbin Station was so popular with the tourists that now there is interest in touring Mun!
        synopsis = Launch a new module for Mun station. It must have a cupola.
        completedMessage = Mun or bust!
		
		// Contract min/max expiry in days.  Default is a contract that does not
        // expire.
        minExpiry = 1
        maxExpiry = 60

        // Contract deadline in days.  Default is no deadline.
        deadline = Random(30,500)

        // Controls for whether a contract can be declined or cancelled, default is
        // true for both
        cancellable = true
        declinable = true
		
		group = MunStation

    notes = It's recommended you don't crew your Hab Module

        // Target Celestial body - controls where the contract must be completed,
        // has some automated effects on numeric values (increasing science, etc.).
        // Also gets used in some of the parameter classes.
        //
        // Default = null (no celestial body)
        targetBody = Mun


    maxSimultaneous = 1

        // Contract rewards
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)
DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ MunStation ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [ Mun ].Random()
	}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
PARAMETER
{
    name = HabModule
    type = VesselParameterGroup

    // The title text to display.
    // Default - Vessel: Any; Duration: <duration>
    // Note in future this will be expanded to support setting the parameters to
    // be for a specific vessel
    title = Give your Kerbals somewhere to relax when not exploring Mun.

	//make sure that kerbals have somewhere to live.

PARAMETER
{
    name = Docking
    type = Docking

    // The vessel attribute is the *defined* name of the vessel that must
    // participate in the docking event.  This is a name of a vessel
    // defined either with the define attribute of a VesselParameterGroup
    // parameter, or via a SpawnVessel.
    //
    // If this Docking parameter is a child of a VesselParameterGroup
    // parameter, then no more than *one* vessel should be provided (the
    // other is the vessel being tracked under the VesselParameterGroup).
    // If no vessel attributes are provided, the second vessel will match
    // any vessel.
    //
    // If this Docking parameter is NOT a child of a VesselParameterGroup,
    // then *at least one* vessel must be provided.  If only one vessel is
    // provided, then the second vessel will match any vessel.
    vessel = MunStation

    // New defined name by which to refer to the docked vessel.  Use this
    // to chain docking parameters, but require them to be done in a certain
    // order.  Generally this name will never be displayed to the player.
    // Need to check that we are docking to the right vessel
    defineDockedVessel = MunStation

    // Text for the contract parameter.
    // Default varies depending on the situation.
    title = Dock with Mun Station
}
PARAMETER
{
    name = PartValidation
    type = PartValidation
	
	part = cupola
	minCount = 1
	title = Include a cupola
}
}

REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = MunHabModuleCupola

minCount = 0
cooldownDuration = 423d
}	
REQUIREMENT
{
    name = PartUnlocked
    type = PartUnlocked

    // Part name that needs to be unlocked.
    part = cupola
}
REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = MunStationCore

minCount = 0
cooldownDuration = 423d
invertRequirement = true
}
    }