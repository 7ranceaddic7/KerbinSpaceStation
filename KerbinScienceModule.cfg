    CONTRACT_TYPE
    {
        // Unique name of the contract type (required)
        name = KerbinScienceModule

        // Contract text details
        title = Add a Science Module to your Station
        description = Whats the point of having a space station if we can't do Science?
        synopsis = Launch a new module for your station. For Science!
        completedMessage = Let the science begin!
		
		// Contract min/max expiry in days.  Default is a contract that does not
        // expire.
        minExpiry = 1
        maxExpiry = 1000.0

        // Contract deadline in days.  Default is no deadline.
        deadline = Random(1,500)

        // Controls for whether a contract can be declined or cancelled, default is
        // true for both
        cancellable = true
        declinable = true

        // Target Celestial body - controls where the contract must be completed,
        // has some automated effects on numeric values (increasing science, etc.).
        // Also gets used in some of the parameter classes.
        //
        // Default = null (no celestial body)
        targetBody = Kerbin
		
		group = KerbinStation

maxSimultaneous = 1

        // Contract rewards
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)

PARAMETER
{
    name = ScienceModule
    type = VesselParameterGroup

    // The title text to display.
    // Default - Vessel: Any; Duration: <duration>
    // Note in future this will be expanded to support setting the parameters to
    // be for a specific vessel
    title = Launch a Science Module

   PARAMETER
{
    name = PartValidation
    type = PartValidation

    // The name of the part to check for.  Optional.
    part = Large_Crewed_Lab
    title = Research Lab
}

PARAMETER
{
    name = Docking
    type = Docking

    // The vessel attribute is the *defined* name of the vessel that must
    // participate in the docking event.  This is a name of a vessel
    // defined either with the define attribute of a VesselParameterGroup
    // parameter, or via a SpawnVessel.
    //
    // If this Docking parameter is a child of a VesselParameterGroup
    // parameter, then no more than *one* vessel should be provided (the
    // other is the vessel being tracked under the VesselParameterGroup).
    // If no vessel attributes are provided, the second vessel will match
    // any vessel.
    //
    // If this Docking parameter is NOT a child of a VesselParameterGroup,
    // then *at least one* vessel must be provided.  If only one vessel is
    // provided, then the second vessel will match any vessel.
    vessel = LKOStation

    // Text for the contract parameter.
    // Default varies depending on the situation.
    title = Dock with our Station
}
}


        REQUIREMENT
        {
            // The requirement name is not used, but should be provided to allow
            // for the possibility of other mods modifying contracts via
            // ModuleManager.
            name = StationDeployed

            // The type defines the type of Requirement.  See the Requirements page
            // for all supported ContractConfigurator requirements.
            type = CompleteContract
			
			//check we've actually deployed our core
			contractType = KerbinStationCore
        }

REQUIREMENT
{
    name = PartUnlocked
    type = PartUnlocked

    // Part name that needs to be unlocked.
    part = Large_Crewed_Lab
}
{
name = FAILSAFE
type = CompleteContract

contractType = KerbinCrewRotation

minCount = 0
cooldownDuration = 150d
}

REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = KerbinStationCore

minCount = 0
cooldownDuration = 150d
invertRequirement = true
}
REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = KerbinScienceModule

minCount = 0
cooldownDuration = 150d
}
    }