CONTRACT_TYPE:NEEDS[TACLifeSupport|LifeSupport|IFILifeSupport]
{
    name = BaseResupply
    title = Do a supply run to @/targetVessel1 .
    group = BasesandStations
	description = Our Kerbonauts are starving so we need you to take some supplies down to @/targetVessel1 .
    notes = The Base are requesting food but is too expensive so bring them no too much.
    synopsis = Take supplies down to @/targetVessel1 .
    completedMessage = Finally our kerbals are eating something.
    minExpiry = 1
    maxExpiry = 7
    cancellable = true
    declinable = true
	maxSimultaneous = 1
    rewardScience = 0.0
    rewardReputation = Random(1, 2)
    rewardFunds = Random(40000, 60000.0)
    failureReputation = Random(1,2)
    failureFunds = Random(1000, 10000.0)
    advanceFunds = Random(1000, 10000.0)
	targetBody = @/targetBody1
    weight = 5.0
	DATA
    {
        type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType()== Base && v.CrewCount()>= 1).Random()
    }
	
	DATA:NEEDS[TACLifeSupport]
	{
	type = double
	requiredValue = true
	FoodLevel = @targetVessel1.ResourceQuantity(Food) + 10
	}
	DATA:NEEDS[LifeSupport]
	{
	type = double
	requiredValue = true
	FoodLevel = @targetVessel1.ResourceQuantity(Supplies) + 10
	}
	DATA:NEEDS[IFILifeSuppor]
	{
	type = double
	requiredValue = true
	FoodLevel = @targetVessel1.ResourceQuantity(LifeSupport) + 10
	}
	DATA
	{
	    type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
	}
    DATA
	{
        type = Location
		vesselLocation = @/targetVessel1.Location()	
    }

	PARAMETER
	{
	name = VesselParameterGroup
	type = VesselParameterGroup
	vessel = @/targetVessel1
	
	PARAMETER:NEEDS[TACLifeSupport]
	{
	    name = Food
		type = HasResource
		resource = Food
		minQuantity = @/FoodLevel
	}	
	PARAMETER:NEEDS[LifeSupport]
	{
	    name = Supplies
		type = HasResource	
		resource = Supplies
		minQuantity = @/FoodLevel
	}
	PARAMETER:NEEDS[IFILifeSupport]
	{
	    name = LifeSupport
		type = HasResource
		resource = LifeSupport
		minQuantity = @/FoodLevel
	}
}
REQUIREMENT
{
    name = CompleteContract
    type = CompleteContract
	contractType = BaseResupply
	minCount = 0
	cooldownDuration = 10d
}

	REQUIREMENT
{
    name = CompleteContract
    type = Expression
	expression = (!@/targetBody1.IsHomeWorld())
}
}