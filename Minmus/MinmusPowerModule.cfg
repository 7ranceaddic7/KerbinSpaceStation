	CONTRACT_TYPE
    {
        // Unique name of the contract type (required)
        name = MinmusPowerModule

        // Contract text details
        title = Add a Power Generation Module to your Station around Minmus
        description = Before we can allow Kerbals to live on the Minmus station, it may be an idea to provide them with heat and light.
        synopsis = Launch a new module for your station. It needs a battery and some form of power generation.
        completedMessage = Let there be light! Congratulations, the power module is in place.

        // Contract min/max expiry in days.  Default is a contract that does not
        // expire.
        minExpiry = 1
        maxExpiry = 30

        // Contract deadline in days.  Default is no deadline.
        deadline = Random(1,500)

        // Controls for whether a contract can be declined or cancelled, default is
        // true for both
        cancellable = true
        declinable = true

        // Target Celestial body - controls where the contract must be completed,
        // has some automated effects on numeric values (increasing science, etc.).
        // Also gets used in some of the parameter classes.
        //
        // Default = null (no celestial body)
        targetBody = Minmus
		
		group = MinmusStation

maxSimultaneous = 1

        // Contract rewards
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)

DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ MinmusStation ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [ Minmus ].Random()
	}
REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}

PARAMETER
{
    name = PowerModule
    type = VesselParameterGroup

    // The title text to display.
    // Default - Vessel: Any; Duration: <duration>
    // Note in future this will be expanded to support setting the parameters to
    // be for a specific vessel
    title = It should be self sustaining and docked to our Station.

	//make sure the module has some form of power generation.


	PARAMETER
{
    name = RTGSolar
    type = Any
    PARAMETER
    {
    name = PartValidationRTG
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times.
    partModule = ModuleDeployableSolarPanel

    // Minimum count, default = 1
    minCount = 1
	title = Have a Solar Panel on board
    }
    PARAMETER
    {
    name = PartValidationSolar
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times. Looking for an RTG
    partModule = ModuleGenerator

    // Minimum count, default = 1
    minCount = 1
title = Have a RTG on board
    }
}
PARAMETER
{
    name = Docking
    type = Docking

    // The vessel attribute is the *defined* name of the vessel that must
    // participate in the docking event.  This is a name of a vessel
    // defined either with the define attribute of a VesselParameterGroup
    // parameter, or via a SpawnVessel.
    //
    // If this Docking parameter is a child of a VesselParameterGroup
    // parameter, then no more than *one* vessel should be provided (the
    // other is the vessel being tracked under the VesselParameterGroup).
    // If no vessel attributes are provided, the second vessel will match
    // any vessel.
    //
    // If this Docking parameter is NOT a child of a VesselParameterGroup,
    // then *at least one* vessel must be provided.  If only one vessel is
    // provided, then the second vessel will match any vessel.
    vessel = MinmusStation

    // New defined name by which to refer to the docked vessel.  Use this
    // to chain docking parameters, but require them to be done in a certain
    // order.  Generally this name will never be displayed to the player.
    // Need to check that we are docking to the right vessel
    defineDockedVessel = MinmusStation

    // Text for the contract parameter.
    // Default varies depending on the situation.
    title = Dock with Minmus Station
}
}

    REQUIREMENT
    {
        name = DoWeHavePower
        type = PartModuleTypeUnlocked
		
		partModuleType = Power
    }

REQUIREMENT
{
    name = FAILSAFEPOWER
    type = CompleteContract

    // The type of contract being checked.  This can either be a
    // ContractConfigurator contract type or a standard contract type (class).
    contractType = MinmusPowerModule

    // The minimum number of times the given contract type must have been
    // completed before the requirement is met.
    // Default = 1
    minCount = 0

    // The amount of time after the last instance of the contract was
    // complete before we can attempt again. Can specify
    // values in years (y), days (d), hours (h), minutes (m), seconds (s)
    // or any combination of those.
    cooldownDuration = 150d
}
REQUIREMENT
{
name = FAILSAFE
type = CompleteContract

contractType = MinmusStationCore

minCount = 0
cooldownDuration = 150d
invertRequirement = true
}
}