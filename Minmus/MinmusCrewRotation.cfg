CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = MinmusCrewRotation

    // Contract title is displayed in the window in the corner, should be
    // short and descriptive
    title = Minmus Station Crew Rotation
	group = MinmusTier3

    description = Time to give your crew a break. Go and rotate the crew of the Minmus space station.

    // Contract notes are displayed in mission control.  Use it to give 
    // any special instructions.
    //
    // Optional
    //notes = These are the contract level notes.

    // The contract synopsis appears in bold.  Give a quick summary of the
    // contract objective.
    synopsis = Go and rotate the crew of the Minmus Space Station.

    // The completedMessage is the message that is displayed when the
    // contract completes.
    completedMessage = Mission Complete! The returned crew members are going for a pint. Care to join?

    // Contract min/max expiry in days.  If both are set to 0.0, it will
    // result in a contract that never expires.
    // Default = 1.0 and 7.0 days, respectively
    minExpiry = 1
    maxExpiry = 30

    // Contract deadline in days.  Default is no deadline.
    deadline = Random(1, 500)

    // Controls for whether a contract can be declined or cancelled, default
    // is true for both
    cancellable = true
    declinable = true

    // Target Celestial body - controls where the contract must be
    // completed, has some automated effects on numeric values (increasing
    // science, etc.).  Also gets used in some of the parameter classes.
    //
    // Default = null (no celestial body)
    targetBody = Minmus

    // The maximum instances of this contract that can be active at one
    // time (0 being unlimited).
    // Default = 0
    maxSimultaneous = 1

    // Contract rewards
	rewardScience = 0.0
    rewardReputation = Random(1, 20.0)
    rewardFunds = Random(50000.0, 500000.0)
    failureReputation = Random(1, 10.0)
    failureFunds = Random(1, 50000.0)
    advanceFunds = Random(1, 50000.0)

weight = 0.8

		DATA
{
    type = Vessel
	requiredValue = true
    targetVessel = [ MinmusStation ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [ Minmus ].Random()
	}
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	
	expression = (@/targetVessel.IsOrbiting())
	}
	
PARAMETER
{
    name = Rotation
    type = VesselParameterGroup

    // The title text to display.
    // Default - Vessel: Any; Duration: <duration>
    // Note in future this will be expanded to support setting the parameters to
    // be for a specific vessel
    title = Send up a new Crew.

	//make sure that kerbals have somewhere to live.
    PARAMETER
    {
    name = HabModuleChild
    type = HasCrewCapacity

    // Minimum count, default = 1
    minCapacity = 1
	title = Rotate the crew
    }

         PARAMETER
{
    name = Docking
    type = Docking

    vessel = MinmusStation
	defineDockedVessel = MinmusStation
	title = Dock with the Minmus Station

		}
		PARAMETER
{
    name = HasCrew
    type = HasCrew

    // (Optional) Minimum and maximum count.  Default values are 1 and
    // int.MaxValue (for min/max).
    minCrew = Random(1, 5)
   disableOnStateChange = true
}

PARAMETER
{
    name = ReturnHome
    type = ReturnHome

    // Text for the contract parameter.
    // Default = Return home.
    title = Rotate the crew and return home
	completeInSequence = true
}
}

REQUIREMENT
{
    name = StationHabitable
    type = CompleteContract

    contractType = MinmusHabModule
	
	minCount = 1
}

REQUIREMENT
{
    name = StationPowerModule
    type = CompleteContract

    contractType = MinmusPowerModule
	
	minCount = 1
}

REQUIREMENT
{
name = All
type = All
REQUIREMENT
{
    name = Rotation
    type = CompleteContract

    contractType = MinmusCrewRotation
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
}
REQUIREMENT
{
    name = Tier3
    type = CompleteContract

    contractType = MinmusRepairFaultyModule
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
	}
	REQUIREMENT
	{
    name = Tier3
    type = CompleteContract

    contractType = MinmusReplaceFaultyModule
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
}
	REQUIREMENT
	{
    name = Tier3
    type = CompleteContract

    contractType = MinmusEvacuate
	
	minCount = 0
	cooldownDuration = Random(30d, 120d)
}
	REQUIREMENT:NEEDS[TACLifeSupport]
{
name = Tier3
type = CompleteContract
contractType = MinmusLSResupply
minCount = 1
cooldownDuration = Random(30d, 120d)
}
	REQUIREMENT
{
name = Tier3
type = CompleteContract

contractType = MinmusScienceExperimentModule

minCount = 0
cooldownDuration = Random(30d, 120d)
}
}
}