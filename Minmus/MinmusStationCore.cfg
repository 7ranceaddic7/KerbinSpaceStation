CONTRACT_TYPE
{
    name = MinmusStationCore
	group = MinmusStation
    title = Launch the Minmus Space Station
    description = We've been very happy with our station around Kerbin. Let's put one around Minmus now!
    synopsis = Build a new Space Station in orbit around Minmus.
    completedMessage = The Station is in place!
        minExpiry = 1
        maxExpiry = 30

        deadline = Random(1, 500)
        cancellable = true
        declinable = true
        targetBody = Minmus
        maxSimultaneous = 1
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)
DATA
{
    type = Vessel
	requiredValue = false
    targetVessel = [ MinmusStationNEW ].Random()
}
PARAMETER
	{
	name = MinmusStationNEW
	type = All
	hideChildren = true
	title = Launch a new Station
	PARAMETER
{
    name = NewStation
    type = VesselParameterGroup
    hideChildren = true
	title = Get the Station into Mun Orbit (must include 1 Station Docking Port and support 5 Kerbals)
//defines the LKO Station.
    define = MinmusStationNEW
	
PARAMETER
	{
    name = LMO
    type = Orbit
	
//Reach Mun Orbit.
    targetBody = Mun
    situation = ORBITING
	maxAltitude = 49000
	}
	PARAMETER
	{
    name = PartValidation
    type = PartValidation
	hideChildren = true
	disableonStateChange = false
    // PartModule(s) to check for.  Optional, and can be specified multiple times.
    part = StationPort
    minCount = 1
	title = Have the Station Core Docking Port on board.
	}
	}
	PARAMETER
    {
    name = HabModuleChild
    type = HasCrewCapacity
    // Minimum count, default = 1
    minCapacity = 5
	disableonStateChange = false
	title = Support 5 Kerbals
    }
	PARAMETER
{
    name = RTGSolar
    type = Any
	hideChildren = true
	disableonStateChange = false
	title = Have a way of generating Power on board.
    PARAMETER
    {
    name = PartValidationRTG
    type = PartValidation
	hideChildren = true
	disableonStateChange = false

    // PartModule(s) to check for.  Optional, and can be specified multiple times.
    partModule = ModuleDeployableSolarPanel

    // Minimum count, default = 1
    minCount = 1
    }
	
    PARAMETER
    {
    name = PartValidationSolar
    type = PartValidation
	hideChildren = true
	disableonStateChange = false

    // PartModule(s) to check for.  Optional, and can be specified multiple times. Looking for an RTG
    partModule = ModuleGenerator

    // Minimum count, default = 1
    minCount = 1
    }
}
PARAMETER
	{
	name = StationScienceSupport
	type = Any
	hideChildren = true
	title = Have a Science Lab on board (supports Station Science)
	PARAMETER
		{
		name = PartValidation
		type = PartValidation
		  hideChildren = true
		// The name of the part to check for. Optional.
		partModule = ModuleScienceLab
		disableonStateChange = false
		}
	PARAMETER:NEEDS[StationScience]
		{
		name = PartValidation
		type = PartValidation
		hideChildren = true
		// The name of the part to check for. Optional.
		partModule = ResearchFacility
		title = Station Science Lab
		disableonStateChange = false
		}
		title = have a research lab on board (supports Station Science)
		}
		PARAMETER
{
    name = PartValidation
    type = PartValidation
	hideChildren = true
	disableonStateChange = false
	part = cupola
	minCount = 1
	title = Include a cupola
}
}
	
REQUIREMENT
{
    name = TechResearched
    type = TechResearched

    // The technology that needs to have been researched.  Take special note that
    // this does not get validated - if you make a typo, the requirement will
    // always return false.
    tech = specializedConstruction
}
REQUIREMENT
{
    name = NoStation
    type = Expression

    expression = (!@/targetVessel.IsOrbiting())
}
REQUIREMENT
	{
    name = LKOStationCheck
    type = CompleteContract

    contractType = KerbinStationCore
	
	minCount = 1
}
REQUIREMENT
{
    name = Orbit
    type = Orbit

    // Target celestial body.  Defaults to the targetBody of the contract.
    targetBody = Minmus
}
}