CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = KerbinStationCore
	group = KerbinStation

    // Contract title is displayed in the window in the corner, should be
    // short and descriptive
    title = Launch a new Station Core into orbit

    // Two options for specifying the description:
    // 1) Supply the full text here in the description field
    description = We want to see the effects of Kerbals living in space. Our international leaders have agreed to put aside their differences and decided that it's time to build a new space station.

    // The contract synopsis appears in bold.  Give a quick summary of the
    // contract objective.
    synopsis = Build a new Space Station Core in Low Kerbin Orbit.

    // The completedMessage is the message that is displayed when the
    // contract completes.
    completedMessage = The core is in place!

    // Contract min/max expiry in days.  Default is a contract that does not
        // expire.
        minExpiry = 1
        maxExpiry = 1000.0

        // Contract deadline in days.  Default is no deadline.
        deadline = Random(1, 500)

        // Controls for whether a contract can be declined or cancelled, default is
        // true for both
        cancellable = true
        declinable = true

        // Target Celestial body - controls where the contract must be completed,
        // has some automated effects on numeric values (increasing science, etc.).
        // Also gets used in some of the parameter classes.
        //
        // Default = null (no celestial body)
        targetBody = Kerbin

        maxSimultaneous = 1

        // Contract rewards
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)
		
		

	PARAMETER
{
    name = NewStation
    type = VesselParameterGroup

    // The title text to display.
    // Default - Vessel: Any; Duration: <duration>
    // Note in future this will be expanded to support setting the parameters to
    // be for a specific vessel
    title = Launch a new Station Core with at least 4 Station Core Docking Ports.

    // The duration that the conditions must be satisfied for.  Can specify
    // values in years (y), days (d), hours (h), minutes (m), seconds (s) or
    // any combination of those.
    duration = 10s

    // Define the name of the craft that will complete this parameter group.
    // Once a craft completes the group, it will be associated with the
    // given key, which can then be referenced in other parameters.  The
    // Vessel <=> key association is persistent, and can be used in future
    // contracts.
    define = LKOStation
	
PARAMETER
{
    name = ReachState
    type = ReachState

// We want our Station in Orbit
    situation = ORBITING
	
	title = Reach orbit
	
    // Maximum orbit altitude in meters.
    // Default = double.MaxValue
    maxAltitude = 249000
}	

PARAMETER
{
    name = PartValidation
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times.
    part = StationPort

     minCount = 1
	title = Have the Station Core Docking Port on board.

}
}
	
REQUIREMENT
{
    name = PartModuleTypeUnlocked
    type = PartModuleTypeUnlocked

    // Type of PartModule that needs to be unlocked.  Can be specified
    // multiple times.  Valid values are defined in
    // Squad/Contracts/Contracts.cfg under MODULE_DEFINITIONS:
    //   Antenna
    //   Dock
    //   Grapple
    //   Power
    //   Wheel
    partModuleType = Dock
}
	
	REQUIREMENT
{
    name = Orbit
    type = Orbit

    // Target celestial body.  Defaults to the targetBody of the contract.
    targetBody = Kerbin
}
REQUIREMENT
{
name = FAILSAFE
type = CompleteContract
contractType = KerbinCrewRotation
minCount = 0
cooldownDuration = 150d
}

REQUIREMENT
{
name = FAILSAFE
type = CompleteContract
contractType = KerbinRepairFaultyModule
minCount = 0
cooldownDuration = 150d
}

REQUIREMENT
{
name = FAILSAFE
type = CompleteContract
contractType = KerbinReplaceFaultyModule
minCount = 0
cooldownDuration = 150d
}

REQUIREMENT
{
name = FAILSAFE
type = CompleteContract
contractType = KerbinStationCore
minCount = 0
cooldownDuration = 150d
}
}
