CONTRACT_TYPE
{
    name = KerbinStationCore
	group = KerbinStation
    title = Launch a new Station Core into orbit
    description = We want to see the effects of Kerbals living in space. Our international leaders have agreed to put aside their differences and decided that it's time to build a new space station.
    synopsis = Build a new Space Station Core in Low Kerbin Orbit.
    completedMessage = The core is in place!

     //Contract min/max expiry in days.
        minExpiry = 1
        maxExpiry = 30

        // Contract deadline in days. Random.
        deadline = Random(1, 500)

        // Contract can be cancelled and declined.
        cancellable = true
        declinable = true

        // Target Kerbin
        targetBody = Kerbin
        // Contract rewards - no science random other rewards.
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)

//Failsafe Data.
DATA
{
    type = Vessel
	requiredValue = false
    targetVessel = [ LKOStationNEWNEW ].Random()
}
DATA
	{
	type = CelestialBody
	requiredValue = true
	targetBody = [Kerbin ].Random()
	}

	//All node ensures that Station is Habitable.
	PARAMETER
	{
	name = LKOStationNEWNEW
	type = All

    //Define the new station.
	PARAMETER
{
    name = NewStation
    type = VesselParameterGroup

    title = Launch a new Station Core with at least 1 Station Core Docking Port.
//defines the LKO Station.
    define = LKOStationNEWNEWNEW
	
PARAMETER
	{
    name = LKO
    type = Orbit

//Reach Low Kerbin Orbit.
    targetBody = Kerbin
    situation = ORBITING
    maxAltitude = 249000
	
	//Check for the Station Docking Port
	}
PARAMETER
	{
    name = PartValidation
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times.
    part = StationPort

     minCount = 1
	title = Have the Station Core Docking Port on board.
	}
	}
	PARAMETER
    {
    name = HabModuleChild
    type = HasCrewCapacity

    // Minimum count, default = 1
    minCapacity = 5
	title = Support 5 Kerbals
    }
	PARAMETER
{
    name = RTGSolar
    type = Any
	hideChildren = true
	title = Have a way of generating Power on board.
    PARAMETER
    {
    name = PartValidationRTG
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times.
    partModule = ModuleDeployableSolarPanel

    // Minimum count, default = 1
    minCount = 1
	title = Have a Solar Panel on board
    }
	
    PARAMETER
    {
    name = PartValidationSolar
    type = PartValidation

    // PartModule(s) to check for.  Optional, and can be specified multiple times. Looking for an RTG
    partModule = ModuleGenerator

    // Minimum count, default = 1
    minCount = 1
title = Have a RTG on board
    }
}
PARAMETER
	{
	name = StationScienceSupport
	type = Any
	PARAMETER
		{
		name = PartValidation
		type = PartValidation
		// The name of the part to check for. Optional.
		partModule = ModuleScienceLab
		title = Research Lab
		}
	PARAMETER:NEEDS[StationScience]
		{
		name = PartValidation
		type = PartValidation
		// The name of the part to check for. Optional.
		partModule = ResearchFacility
		title = Station Science Lab
		}
		title = have a research lab on board (supports Station Science)
		}
		PARAMETER
{
    name = PartValidation
    type = PartValidation
	
	part = cupola
	minCount = 1
	title = Include a cupola
}
}

	//Make sure the Core part is actually unlocked.
REQUIREMENT
{
    name = TechResearched
    type = TechResearched

    // The technology that needs to have been researched.  Take special note that
    // this does not get validated - if you make a typo, the requirement will
    // always return false.
    tech = specializedConstruction
}
//Check Station doesn't already exist
REQUIREMENT
{
    name = NoStation
    type = Expression

    expression = (!@/targetVessel.IsOrbiting())
}
//Make sure we've reached Orbit
REQUIREMENT
{
    name = Orbit
    type = Orbit

    // Target celestial body.  Defaults to the targetBody of the contract.
    targetBody = Kerbin
}
}