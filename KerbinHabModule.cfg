	CONTRACT_TYPE
    {
        // Unique name of the contract type (required)
        name = KerbinHabModule

        // Contract text details
        title = Add a Habitation Module to your Station
        description = Before we can allow Kerbals to live on our station, it may be an idea to provide them with somewhere to live.
        synopsis = Launch a new module for your station. It must be capable of storing at least 5 Kerbals.
        completedMessage = We have somewhere to live! Let the science begin!
		
		// Contract min/max expiry in days.  Default is a contract that does not
        // expire.
        minExpiry = 1
        maxExpiry = 1000.0

        // Contract deadline in days.  Default is no deadline.
        deadline = Random(1,500)

        // Controls for whether a contract can be declined or cancelled, default is
        // true for both
        cancellable = true
        declinable = true
		
		group = KerbinStation

    notes = It's recommended you don't crew your Hab Module

        // Target Celestial body - controls where the contract must be completed,
        // has some automated effects on numeric values (increasing science, etc.).
        // Also gets used in some of the parameter classes.
        //
        // Default = null (no celestial body)
        targetBody = Kerbin
		targetVessel = LKOStation

    maxSimultaneous = 1

        // Contract rewards
        rewardScience = 0
        rewardReputation = Random(1.0, 100.0)
        rewardFunds = Random(50000.0, 500000.0)
        failureReputation = Random(1.0, 100.0)
        failureFunds = Random(50000.0, 500000.0)
        advanceFunds = Random(50000.0, 500000.0)

PARAMETER
{
    name = HabModule
    type = VesselParameterGroup

    // The title text to display.
    // Default - Vessel: Any; Duration: <duration>
    // Note in future this will be expanded to support setting the parameters to
    // be for a specific vessel
    title = Give your Kerbals somewhere to live

	//make sure that kerbals have somewhere to live.
    PARAMETER
    {
    name = HabModuleChild
    type = HasCrewCapacity

    // Minimum count, default = 1
    minCapacity = 5
	title = Support 5 Kerbals
    }
PARAMETER
{
    name = Docking
    type = Docking

    // The vessel attribute is the *defined* name of the vessel that must
    // participate in the docking event.  This is a name of a vessel
    // defined either with the define attribute of a VesselParameterGroup
    // parameter, or via a SpawnVessel.
    //
    // If this Docking parameter is a child of a VesselParameterGroup
    // parameter, then no more than *one* vessel should be provided (the
    // other is the vessel being tracked under the VesselParameterGroup).
    // If no vessel attributes are provided, the second vessel will match
    // any vessel.
    //
    // If this Docking parameter is NOT a child of a VesselParameterGroup,
    // then *at least one* vessel must be provided.  If only one vessel is
    // provided, then the second vessel will match any vessel.
    vessel = LKOStation

    // New defined name by which to refer to the docked vessel.  Use this
    // to chain docking parameters, but require them to be done in a certain
    // order.  Generally this name will never be displayed to the player.
    // Need to check that we are docking to the right vessel
    defineDockedVessel = LKOStation

    // Text for the contract parameter.
    // Default varies depending on the situation.
    title = Dock with our Station
}
}


        REQUIREMENT
        {
            // The requirement name is not used, but should be provided to allow
            // for the possibility of other mods modifying contracts via
            // ModuleManager.
            name = StationDeployed

            // The type defines the type of Requirement.  See the Requirements page
            // for all supported ContractConfigurator requirements.
            type = CompleteContract
			
			//check we've actually deployed our core
			contractType = KerbinStationCore
        }
{
name = Cooldown
type = CompleteContract

contractType = KerbinHabModule

minCount = 0
cooldownDuration = 30d
}
{
name = Cooldown
type = CompleteContract

contractType = KerbinHabModuleCupola

minCount = 0
cooldownDuration = 30d
}
 REQUIREMENT
{
name = SufficientSpace
type = Expression
expression = @/targetVessel.EmptyCrewSpace() < 5
}
    }